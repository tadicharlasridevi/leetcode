 def shortestToChar(self, s: str, c: str) -> List[int]:
        s=list(s)
        a=[]
        b=[]
        for i in range(len(s)):
            a.append(i)
            if(s[i]==c):
                b.append(i)
        c=[]
        d=[]
        for i in range(len(a)):
            for j in range(len(b)):
                c.append(abs(a[i]-b[j]))
            c.sort()
            d.append(c[0])
            c=[]
        return d
        
        
        
        
        
        Example 1:

Input: s = "loveleetcode", c = "e"
Output: [3,2,1,0,1,0,0,1,2,2,1,0]
Explanation: The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).
The closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.
The closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.
For index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.
The closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.
Example 2:

Input: s = "aaab", c = "b"
Output: [3,2,1,0]
 

Constraints:

1 <= s.length <= 104
s[i] and c are lowercase English letters.
It is guaranteed that c occurs at least once in s.
        
