def findLengthOfLCIS(self, n: List[int]) -> int:
        c=1 
        m=1
        for i in range(1, len(n)):
            if n[i] > n[i - 1]:
                c+= 1
            else:
                m= max(m, c)
                c= 1
        return max(m, c)
        
        
        
        
        
        Example 1:

Input: nums = [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.
Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element
4.
Example 2:

Input: nums = [2,2,2,2,2]
Output: 1
Explanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly
increasing.
